{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:06-07:00"
    },
    {
      "path": "group_1.html",
      "title": "Resources - Shiny",
      "description": "none",
      "author": [],
      "contents": "\r\nBrief description\r\nShiny may be one of the most popular apps for interactive Dashboards, and such popularity can be witnessed by vast numbers of resources over both online and offline resources. This report introduces useful resources for the Shiny app for both beginners and experts.\r\nThe two most useful resources where I could obtain most of information were Rstudio and Awesome R Shiny\r\nLong description\r\nThe following list shows resources for Shiny apps\r\n1. Tutorial\r\nShiny from RStudio : 32 Video tutorials (grouped in 3 parts), 4 videos from RStudio conference and webinars\r\nShiny tutorials and cheat sheet : includes both codes and appearances of the corresponding apps, has great interactivity\r\na gRadual intRoduction to Shiny : Introductory workshop to basic Shiny Concept, recommended for intermediate R users\r\nBuilding Shiny apps : An interactive tutorials\r\nData Professor : Youtube Channel with 112K subscribers\r\nAppsilon : Youtube Channel with 1.7K subscribers\r\n2. Webinars\r\nRStudio Webinars : 14 webinar videos related to Shiny, also includes videos for other useful contents such as python and R\r\n3. eBooks\r\n“Mastering Shiny”\r\n“Engineering Production-Grade Shiny Apps”\r\n“Outstanding User Interfaces with Shiny“\r\n4. Shiny Gallery\r\nShiny from RStudio : Gallery from RStudio\r\nShinyApps: Experience Statistics : includes many Shiny examples related to statistics\r\nAwesome-shiny-apps-for-statistics: includes many Shiny examples related to statistics, machine learning, many more (some examples includes K-Means, Bayesian Analysis, Hypothesis Testing, etc.)\r\n5. Conferences\r\nrstudio::conf : conference from RStudio, covers not only the Shiny apps but many other useful stuffs (2 day workshops and 2 day conference)\r\nAppsilon Shiny Conferences : relatively new conference (Appsilon was founded in 2013 by people from Google, Microsoft, Bank of America and Domino Data Lab)\r\n6. Communities\r\nRStudio Community : includes info about Shiny and many other useful topics on R\r\nR-bloggers : includes info about Shiny and many other useful topics on R, machine learning, etc.\r\nR Shiny in Reddit : created in 2013, over 2000 members\r\n7. Miscellaneous\r\nShiny Function References : includes all the references of Shiny functions\r\nTagged questions regarding Shiny in Stack Overflow : includes 24,961 questions regarding Shiny\r\nAwesome R Shiny : github page that literally has everything about Shiny apps (includes links to various communities, deployments, tutorials, tools, books, etc.)\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:07-07:00"
    },
    {
      "path": "group_10.html",
      "title": "Testing + Databases",
      "description": "Shiny",
      "author": [],
      "contents": "\r\nBrief description\r\nTesting is essential to all the applications and code that we develop, including Shiny app. Two testing packages are frequently used for Shiny testing in R that are testthat and Shinytest.\r\nShiny supports both local and remote connection to the storage database. By default, Shiny supports to save and load data files such as CSV to the local server. It’s possible to load data to and export from the Shiny app including relational databases. There are majorly seven methods for storing persistent data remotely with a Shiny app: local file system, Dropbox, Amazon S3, SQLite, MySQL, Google Sheets, and MongoDB.\r\nLong description\r\nShiny: Testing\r\nThe packages testthat and shinytest are required for the test presented for Shiny and could be installed with install.packages(). shinytest has the class ShinyDriver (see ?ShinyDriver) which opens the Shiny app in a new R-Session as well as an instance of PhantomJS. Produced by developers of RStudio, Shinytest offers three principal classes of tests: 1. Unit tests: These are used to test that functions behave as expected. 2. Server function tests: By running the server function of a Shiny application to simulate a real client session, these tests can be used to test reactive components, and outputs in the server function of your Shiny app. 3. Snapshot-based tests: While your Shiny application is run in a headless web browser, user actions - such as clicking on buttons and setting inputs to particular values - are simulated. These tests then take snapshots of the state of the application and references those snapshots when evaluating the state of a future iteration of the application.\r\nThere are a handful of testing packages that can be implemented in Shiny apps; below are two of the most common ones. Below is a minimal example of a Shiny app (app.R) to be tested. Using the expectation functions of the package testthat it is thus easily possible to test the functions of the Shiny app. An advantage of this is that when calling devtools::test() both the tests of the Shiny app and other unit tests are taken into account.\r\n\r\n\r\nlibrary(shinytest)\r\nlibrary(testthat)\r\n\r\ncontext(\"Test Shiny app\")\r\n\r\n# open Shiny app and PhantomJS\r\napp <- ShinyDriver$new(\"<path to app.R>\")\r\n\r\ntest_that(\"output is correct\", {\r\n  # set num_input to 30\r\n  app$setInputs(num_input = 30)\r\n  # get text_out\r\n  output <- app$getValue(name = \"text_out\")\r\n  # test\r\n  expect_equal(output, \"The square of the number n is: n² = 900\")  \r\n})\r\n\r\n# stop the Shiny app\r\napp$stop()\r\n\r\n\r\n\r\nShiny: Database Connection\r\nConnecting Shiny applications to a data source requires no additional platform-specific database connection implementation strategy. Simply using the DBI package allows R developers to connect their Shiny application to all the most frequently used Database Management Systems. Connecting your Shiny application to a data layer can be accomplished in different ways depending on what architecture is used to store application data. The most common data source connections can be made using the DBI package. Persistent storage lets you do more with your Shiny apps. You can even use persistent storage to access and write to remote data sets that would otherwise be too big to manipulate in R.\r\nThe following table can serve as a reminder of the different storage types and when to use them. Remember that any method that uses local storage can only be used on Shiny Server, while any method that uses remote storage can be also used on shinyapps.io.\r\nMethod\r\nData type\r\nLocal storage\r\nRemote storage\r\nR package\r\nLocal file system\r\nArbitrary data\r\nYES\r\n\r\n-\r\nDropbox\r\nArbitrary data\r\n\r\nYES\r\nrdrop2\r\nAmazon S3\r\nArbitrary data\r\n\r\nYES\r\naws.s3\r\nSQLite\r\nStructured data\r\nYES\r\n\r\nRSQLite\r\nMySQL\r\nStructured data\r\nYES\r\nYES\r\nRMySQL\r\nGoogle Sheets\r\nStructured data\r\n\r\nYES\r\ngooglesheets4\r\nMongoDB\r\nSemi-structured data\r\nYES\r\nYES\r\nmongolite\r\nLinks\r\nhttps://testthat.r-lib.org\r\nhttps://shiny.rstudio.com/articles/testing-overview.html\r\nhttps://cran.r-project.org/web/packages/RSelenium/vignettes/shinytesting.html\r\nhttps://mastering-shiny.org/scaling-testing.html\r\nhttps://shiny.rstudio.com/articles/persistent-data-storage.html\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:08-07:00"
    },
    {
      "path": "group_11.html",
      "title": "Testing + Databases",
      "description": "Tableau",
      "author": [],
      "contents": "\r\nTesting and Connecting to Databases\r\nBrief description\r\nThe Tableau suite offers a variety of paid dashboard visualization solutions, as well as a some limited read-only and limited-sharing options. Hence, when it comes to testing, a variety of paid testing solutions are available to meet the need for a range of custom use-specific testing scripts, though Tableau offers free testing solutions for load and capacity management for assessing scability needs. As for connectivity to external databases, Tableau offers a wide array of solutions to seamlessly leverage external data by accessing and retrieving it using a clearly outlined processes listed on its website, tailored to many common data storage options.\r\nLong description\r\nTesting\r\nWhen it comes to load and capacity testing, TabJolt provides an open-source solution that can be downloaded directly from its GitHub repository (https://github.com/tableau/tabjolt), helping users assess scalability and capacity needs given application-specific requirements. This is the default Tableau-recommended solution for such testing, which allows the user to select representative workbooks, model expected usage, and assess generated results.\r\nIn addition, a number of automated Tableau testing products are available on the market to perform a wide variety of tests, such has performance testing, stress testing, functional testing, and upgrade testing, among others. Two examples of popular such products include DataGaps and Wisdom (formerly known as Kinesis) These are subscription-based rather than open source products, much like Tableau itself.\r\nConnecting to Databases\r\nThe process to connecting to databases using Tableau varies slightly depending if it is done via Tableau Desktop, Tableau Server, or Tableau Online. To facilitate connecting to data through either Tableau product, Tableau’s Data Management Add-on leverages Tableau Catalog, which includes virtual connections as a central access point to data. In addition, Tableau Prep Builder is a powerful tool to connect directly to published data sources that can be used in conjunction with Tableau Catalog.\r\nWhen using Tableau Desktop, the process of connecting to a database is simple. The user simply has to navigate to Connect, Access, and Sign In via the Tableau UI, and select the needed table data by dragging it to the Canvas or by using an SQL query, and select the appropriate sheet tab. More specific database connection instructions for Tableau Server and Tableau Online can be found in on the Tableau website.\r\nLinks\r\nhttps://github.com/tableau/tabjolt\r\nhttps://help.tableau.com/current/blueprint/en-us/bp_load_testing.htm\r\nhttps://www.datagaps.com/bi-testing-tools/bi-validator/automate-tableau-testing/\r\nhttps://wiiisdom.com/wiiisdom-ops/?utm_source=youtube&utm_medium=kinesislauncheng\r\nhttps://help.tableau.com/current/pro/desktop/en-us/examples_access.htm#:~:text=Start%20Tableau%20and%20under%20Connect,and%20then%20enter%20the%20password.\r\nhttps://help.tableau.com/current/pro/desktop/en-us/examples_tableauserver.htm\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:09-07:00"
    },
    {
      "path": "group_12.html",
      "title": "Testing and databases",
      "description": "Dash",
      "author": [],
      "contents": "\r\nBrief description\r\ndash.testing is the offical package available on Dash website for testing dash app in both python and R. It provides some off-the-rack pytest fixtures and testing APIs, including browser testing APIs and dash APIs. There is also an open source pytest-dash package but it is deprecated since the release of dash.testing. As dash.testing is incorporated in dash, it is intended to draft the best practice for intergration test of dash app.\r\nBascially, dash.testing uses pytest and Selenium Webdriver for simulating the interaction inside a web browser. We can use pytest fixture and the standard Python assert statements for verifying expectations and values. With dashr fixture, an instance of Python class providing a reliable framework to execute the app, we can use the same set of testing API calls as in testing Python app. Visual Regression Testing tool, Percy, is also integrated in dash.testing so that we can test about the graphical aspects of a Dash App and do visual testing with Percy snapshot.\r\nDash Enterprise enables Dash Apps to use open source libraries to query external databases and datastores in callbacks or job queues. Dash use standardized Python DB-API (PEP-0249) for database connection and query execution. As it adopts the standard API, it is easy and straight forward for us to connect to external databases.\r\nLong description\r\nTesting\r\nFor using dash.testing, we need to install dash.testing and webdrivers (or use remote Selenium-grid for testing). The dash.testing package does not guarantee that the given selenium grid works well so it is useful to change the logging level or customize the browser options for testing.\r\nA test case is composed of preparation, actions, and checkpoints. pytest allow us to use the standard Python assert for verifying expectations and values. Sample codes for prepartion and action\r\nstart_server(app)\r\nwait_for_text_to_equal(\"#nully-wrapper\", \"0\", timeout=4)\r\nSample code for checkpoint\r\nassert dash_duo.find_element(\"#nully-wrapper\").text == \"0\"\r\nFor testing dash app in R. we need to define a string with a valid path to a .R file and pass it to start_server. After that, we can use dashr fixture, an instance of Python class which provides a reliable framework to execute the app and test one or more of its features via Selenium WebDriver.\r\nDatabase\r\nTo connect external database, we need to install the database driver and other system dependency. After creating and testing the database connection, we can construct SQL query as in python DB-API.\r\nSample Coode for connection and query\r\ndef try_connection():\r\n    try:\r\n        with postgres_engine.connect() as connection:\r\n            stmt = text(\"SELECT 1\")\r\n            connection.execute(stmt)\r\n        print(\"Connection to database successful.\")\r\n    except Exception as e:\r\n        print(\"Connection to database failed, retrying.\")\r\n        raise Exception\r\nt = text(\"SELECT * FROM users WHERE id=:user_id\")\r\nresult = pd.read_sql(t, params={'user_id': 12})\r\nLinks\r\nhttps://dash.plotly.com/testing\r\nhttps://dash.plotly.com/dash-enterprise/database-connections\r\n",
      "last_modified": "2022-03-28T19:41:09-07:00"
    },
    {
      "path": "group_14.html",
      "title": "Backend and project structure",
      "description": "Tableau",
      "author": [],
      "contents": "\r\nBrief description\r\nGiven that Tableau is a fully managed data visualization and analysis platform distributed as a SaaS product, virtually all of their products’ source code is not available to common users or developers, and so one typically cannot change or develop anything relating to code architecture or organization. This also includes underlying plotting processes. Tableau does however offer a set of developer tools, with which an individual could - in principle - develop a Tableau dashboard extension which overrides or overlays front-end components.\r\nLong description\r\nTableau is a data visualization and analysis platform, distributed as a fully managed software as a service (SaaS) product. As such, virtually all of their products’ source code is not available to common users or developers, and so one typically cannot change or develop anything relating to code architecture or organization.\r\nThere doesn’t really exist the concept of integrating external data visualization tools or libraries with a Tableau dashboard within a Tableau environment. Instead, Tableau dashboards, ad hoc reports, etc., are created entirely via GUIs which abstracts away any backend plotting control from the UX. This is common practice for many softwares/tools/products classified as Business Intelligence (BI) tools. And like other BI tools out there, Tableau offers a rich and robust library of data visualization options across all there modes of delivery (i.e. Tableau Desktop, Tableau Server, Tableau Online, etc.)\r\nTableau does however offer a set of developer tools. An individual could, in principle, develop a Tableau dashboard extension which overrides or overlays front-end components (JavaScript, CSS, etc.) if they were tasked with creating embedded Tableau components in - for example - some proprietary web app. This type of project does happen in the real world, but typically comes with a steep cost, complex implementation, and issues with long-term solution management (at least, in the opinion/experience of the author of this little write-up).\r\nHere are some examples of some of such dashboard extensions which are publically available.\r\nLinks\r\nhttps://www.tableau.com/developer/tools\r\nhttps://extensiongallery.tableau.com/extensions?version=2021.2\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:10-07:00"
    },
    {
      "path": "group_15.html",
      "title": "Backend and project structure",
      "description": "Dash",
      "author": [],
      "contents": "\r\nBrief description\r\nDash primarily supports Plotly objects. It is, however, possible to use other plotting libraries with Dash. Dash prides itself as a language-agnostic framework that supports range of programming languages. According to the documentation, Dash provides support for Python, R, F# and Julia programming languages.\r\nOther plotting libraries that can be used with Dash via different conversion mechanisms are Altair, Matplotlib, ggplot, etc.\r\nThe following types of maps and map components can be implemented in Dash: Choropleth Maps, Mapbox Choropleth Maps, Bubble Maps, Mapbox Density Heatmap, Hexbin MapBox, Mapbox Map Layers and more.\r\nThe typical file structure for a successful build and development of a Dash app is:\r\n|── data/            .csv \r\n│   ├── processed/\r\n│   └── raw/\r\n├── src/             app.py/app.R\r\n├── doc/             .md\r\n├── Procfile\r\n├── Dockerfile\r\n├── docker-compose.yml\r\n├── requirements.txt\r\n├── README.md\r\n├── CODE_OF_CONDUCT.md\r\n├── CONTRIBUTING.md\r\n└── LICENSE.md\r\nLong description\r\nCommon Plotting Libraries\r\nDash prides itself as a language-agnostic framework that supports range of programming languages. According to the documentation, Dash provides support for Python, R, F# and Julia programming languages.\r\nIn Python, Dash primarily supports Plotly objects. It is, however, possible to use other plotting libraries with Dash via different conversion mechanisms such as Seaborn/Matplotlib, Altair/Vega-Lite and Bokeh. Similarly, in R, aside from the Plotly library, Dash also supports some common graphing packages such as ggplot. However, the level of interaction and robustness of those graphs are maximized when they are plotted using Plotly.\r\nFor Altair: We can take advantage of the to_html() method to include charts in iframes. This is essentially nesting a HTML page within a page.\r\nFor Matplotlib: There is a mpl_to_plotly() function in plotly.tools library that will return a plotly figure(which can then be returned to Graph’s figure attribute) from matplotlib figure.\r\nFor ggplot: With ggplotly() by Plotly, you can convert your ggplot2 figures into interactive ones powered by plotly.js, ready for embedding into Dash applications.\r\nMap and Map Libraries Overview\r\nAccording to here, the following types of maps and map components can be implemented in Dash:\r\nChoropleth Maps\r\nMapbox Choropleth Maps\r\nBubble Maps\r\nMapbox Density Heatmap\r\nHexbin MapBox\r\nMapbox Map Layers and more…\r\nWhile Plotly is the primary map plotting library for Dash, other plotting libraries can as well be used. Other popular libraries such as Altair, ggplot, Folium are the other popular options that can be used in Dash via conversion mechanisms.\r\nFiles Organization and Structure\r\nFor a successful build and deployment of the app on Heroku, the following files are must-haves: * app.py or app.R file * Dockerfile * Docker-compose.yml * Procfile * requirements.txt\r\nThe typical file structure is:\r\nproject/\r\n├── data/            .csv\r\n│   ├── processed/\r\n│   └── raw/\r\n├── src/             app.py/app.R\r\n├── doc/             .md\r\n├── Procfile\r\n├── Dockerfile\r\n├── docker-compose.yml\r\n├── requirements.txt\r\n├── README.md\r\n├── CODE_OF_CONDUCT.md\r\n├── CONTRIBUTING.md\r\n└── LICENSE.md\r\nAnother popular alternative is to put the app.py or app.R file in the root folder of the project.\r\nLinks\r\nhttps://medium.datadriveninvestor.com/plotly-dash-everything-you-need-to-know-bc09a5e45395\r\nhttps://appsilon.com/dash-vs-shiny/\r\nhttps://plotly.com/ggplot2/\r\nhttps://towardsdatascience.com/dash-for-beginners-create-interactive-python-dashboards-338bfcb6ffa4\r\nhttps://plotly.com/python/maps/\r\nhttps://medium.com/swlh/interactive-choropleth-maps-in-python-dd943b99df50\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:11-07:00"
    },
    {
      "path": "group_16.html",
      "title": "Documentation and Reproducibility",
      "description": "Shiny",
      "author": [],
      "contents": "\r\nBrief description\r\nShiny is an R package for building interactive web apps straight from R. You can visit Shiny Website for the most useful resources on mastering shiny or look for help from RStudio Community or shinyapps-users Google group.\r\nTo ensure the Shiny app is deployed under a reproducible environment, there are two tools we can use: renv and Docker.\r\nLong description\r\nOfficial Documentation Resources\r\nShiny Website\r\nMastering Shiny\r\nEngineering Production-Grade Shiny Apps\r\nPackage ‘shiny’ - The Comprehensive R Archive Network\r\nGetting Help\r\nRStudio Community\r\nshinyapps-users Google group\r\nGallery\r\nShiny User Showcase\r\nShiny Demos\r\nShiny - Run the dashbaord in a reproducible way locally\r\nTo ensure the app is deployed under the same configuration as your local application, there are two tools we can use here.\r\n1. {renv}\r\n{renv} package allows one to have a project-based library so others can run the dashboard locally. To create a reproducible renv library, here are the steps to follow:\r\nInitiate the project with renv::init().\r\nThis function will create/modify the .Rprofile file at the root of your project, and creates a renv.lock file, which will list all the package dependencies.\r\n# Loading and initiating {renv}\r\nlibrary(renv)\r\ninit()\r\nInstall/remove packages.\r\n# Installing attempt\r\ninstall.packages(\"attempt\")\r\n# Create a fake script that launches {attempt}\r\nwrite(\"library(attempt)\", \"script.R\")\r\n\r\nTake a snapshot() of the state of your project.\r\n# Snapshoting the current status of the environment\r\nrenv::snapshot(confirm = FALSE)\r\nrenv::restore() the state of your project using renv.lock.\r\nif you are either working as a team or deploying to a server, you will have to restore the state of your project, which is now living somewhere else, inside your current project/deployment. And to do that, the function to call is renv::restore(), which will update your local project with the dependencies listed inside your Lockfile.\r\nShare .Rprofile, renv.lock, renv/activate.R and renv/settings.dcf files for reproducibility.\r\n2. Docker\r\nDocker is a program that allows to download, install, create, launch and stop multiple operating systems, called containers, on a machine, which will be called the host. This host can be your local computer, or the server where you deploy your application/s.\r\nA. Building a Dockerfile with golem\r\nFor a golem project, you can run the following from the root of your package:\r\ngolem::add_dockerfile()\r\nB. {dockerfiler}\r\nYou can use dockerfiler package to generate a Dockerfile straight from R\r\n# Creating a new Dockerfile object\r\nmy_dock <- Dockerfile$new()\r\n# Adding RUN, ADD, WORKDIR and EXPOSE commands\r\nmy_dock$RUN(\"apt-get update && apt-get install -y git-core\")\r\nmy_dock$ADD(\".\", \"/\")\r\nmy_dock$RUN(\"mkdir /build_zone\")\r\nmy_dock$ADD(\".\", \"/build_zone\")\r\nmy_dock$WORKDIR(\"/build_zone\")\r\nmy_dock$RUN(r(remotes::install_local(upgrade=\"never\")))\r\nmy_dock$EXPOSE(80)\r\n# Viewing the Dockerfile\r\nmy_dock\r\nC. Develop inside a Docker container\r\nIf you plan on using Docker as a deployment mechanism, you can also use Docker as a local developer environment.\r\nLinks\r\nhttps://shiny.rstudio.com/\r\nhttps://mastering-shiny.org/\r\nhttps://engineering-shiny.org/\r\nhttps://github.com/ThinkR-open/golem\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:12-07:00"
    },
    {
      "path": "group_17.html",
      "title": "Documentation and Reproducibility",
      "description": "Tableau",
      "author": [],
      "contents": "\r\n​ ### Brief description ​ Here are the main takeaway messages: ​ - There are 3 main ways to use tableau: Tableau Desktop, Tableau Online, and Tableau Server. - It is possible to run Tableau server locally in a Linux Docker container to make it reproducible.\r\n- For Tableau Desktop, it is possible to save a dashboard as a “packaged workbook”. Packaged workbooks contain the workbook along with a copy of any local file data sources and background images. - It is also possible to publish workbooks and data to the web. This will allow people in your organization to view, interact with, download, edit, and save published views, even if they do not use Tableau Desktop. ​ ### Long description ​ There are 3 main ways to use tableau: Tableau Desktop, Tableau Online, and Tableau Server. ​ For Tableau Desktop, it is possible to save a dashboard as a “packaged workbook”. Packaged workbooks contain the workbook along with a copy of any local file data sources and background images. In this way, the workbook is no longer linked to the original data sources and images. Packaged workbooks are saved as a single file with a .twbx file extension. Anyone with the file has access to the full dashboard via Tableau Desktop. ​ It is also possible to publish workbooks and data to the web. This will allow people in your organization to view, interact with, download, edit, and save published views, even if they do not use Tableau Desktop. One feature of Tableau is that it is possible to publish workbook’s and data to the web individually. For example, if you wanted to just make your dataset available to others, you could publish your data to the web, and allow others to create Tableau workbooks using that data. One thing to note with this approach, is that everyone is essentially sharing the same data source, and therefore any changes to the data would be reflected in any workbook that references it. ​ Here are the official steps for publishing a tableau workbook online: https://help.tableau.com/current/pro/desktop/en-us/publish_workbooks_howto.html ​ If you find a packaged Tableau workbook online that you would like to work on locally, you just have to download the .twbx file and “Unpackage” the workbook. ​ On a Windows or macOS computer, rename the file with a .zip extension (for example, from myfile.twbx to myfile.zip) and then double-click it. ​ When you unpackage a workbook, you get a regular workbook file (.twb), along with a folder that contains the data sources and images that were packaged with the workbook. ​ It is also possible to run Tableau using a Docker container. A Tableau server in a Container image is a Docker image that runs an entire self-contained Tableau server application. However, this comes with some limitations as some of the Tableau features such as Kerberos or Resource Monitoring Tool (RMT) are not supported in this server image. ​ ### Links ​ Some of the useful links can be found below: ​ - Learn Tableau - Official Documentation - How to Publish a Workbook - [How to add Documentation] (https://interworks.com/blog/2020/02/24/how-to-improve-your-tableau-work-with-documentation/)\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:13-07:00"
    },
    {
      "path": "group_18.html",
      "title": "Documentation and Reproducibility",
      "description": "Dash",
      "author": [],
      "contents": "\r\nBrief description\r\nThis section covers: 1. All the documentation resources available; and 2. Ways to run the dashboard in a reproducible way locally.\r\nLong description\r\nDash - Official Documentation Resources\r\nUser Guides by Programming Languages\r\nDash Python User Guide\r\nDash R User Guide\r\nDash Julia User Guide\r\nDash F# User Guide\r\nPlotly Open Source Graphing Libraries\r\nUser Guides by Programming Languages/Packages\r\nPlotly Python Open Source Graphing Library User Guide\r\nPlotly R Open Source Graphing Library User Guide\r\nPlotly Julia Open Source Library User Guide\r\nPlotly JavaScript Open Source Graphing Library User Guide\r\nPlotly ggplot2 Open Source Graphing Library User Guide\r\nPlotly F# Graphing Library User Guide\r\nPlotly MATLAB Open Source Graphing Library User Guide\r\nCommunity Forum\r\nPlotly Community Forum for Dash\r\nDash Enterprise FAQ\r\nDash Enterprise FAQ\r\nWebinbars\r\nWebinars on Dash\r\nWays to run the dashboard in a reproducible way locally\r\nFacts about Dash and Plotly with regards to reproducibility\r\nDash and Plotly are is free and open source and are licensed under the MIT license;\r\nAll the Github repositories are public and are open for viewing the source, reporting issue and contributing;\r\nIn other words, any dashboard app, packages, etc. created with any of the Dash and Plotly libraries can be shared with others free of charge, and the other users can install and use the code and reproduce the same analysis from start to finish without hindrance. Users can even choose to contribute to the Dash and Plotly graphing libraries if they want to;\r\nIt is also explicitly stated that Dash and Plotly can be used for making and viewing completely offline without Internet connection. In other words, everything created using Dash and Plotly can be run locally on a computer or on a server in a local network. Installation guides are available as part of the User Guides listed above.\r\nReferences:\r\nhttps://plotly.com/python/is-plotly-free/\r\nhttps://github.com/plotly\r\nhttps://github.com/plotly/graphing-library-docs\r\nAppendix\r\nThe original question:\r\nDocumentation and reproducibility - (1) Mention all the official documentation resources. (2) Are there ways to run the dashboard in a reproducible way locally (ie., creating a package?, Docker? Binder? Nothing is said about it?) Provide links/examples if you find that it is possible.\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:13-07:00"
    },
    {
      "path": "group_19.html",
      "title": "Reactive Plots",
      "description": "Shiny",
      "author": [],
      "contents": "\r\nBrief description\r\nThe basic way to create a reactive plot is to create a Shiny UI with the fluidPage( ) function. The UI object will set the general layout of the dashboard, and inside that we will define the input box with the numeric input, title and value (similar to Dash). We then create a server function which would take in input, output and session. Inside the function we will use a reactive( ) expression to tell the server to watch for the changes in inputs. Also, we define the output which tells the UI how to update plots, boxes or texts. We can only call the reactive( ) expression within a render function or another reactive expression.\r\nWe can create a plot reactive to more than one input by simply defining multiple inputs with the help of --Input( ) functions. Inside the server function we can call the input by calling input with the $ sign. We need to give the plot function to renderPlot( ). The plot function needs to be designed to accept multiple inputs.\r\nTo create more than one reactive output (for example, having a plot and text to print on the screen), we need to add the same input into multiple renders. For example, inside the server function, an input a can be given to to renderPlot( ), renderTable( ) or renderText( ) simultaneously. Inside the render functions we should have the functions that create the plot, table and text.\r\n\r\nLong description\r\nThe basic way to create a reactive plot\r\nThe basic way to create a reactive plot is to create a Shiny app object with the the help of shinyApp( ) function. This function requires two basic arguments: a UI definition and a function (we name it “server” here) with 3 parameters: input, output and session.\r\nThe UI object is built with the fluidPage( ) function to set the general layout of the dashboard. Inside that we can use --Input( ) functions to define input boxes with the input variable name (inputID), the label and the value to begin with. For example, in the sample code below, one input box is defined with ‘a’ as the variable name (inputID), 10 as the start value and ‘a_label’ as the title of the box. We then define the output plots with one or more --Output( ) functions. The parameters inside the --Output( ) functions come from the server function that we define in the next step. In this specific example, we use plotOutput( ) to build a graph.\r\nNext, we create a server function which would take in three parameters: input, output and session.\r\n- The input parameter corresponds an object containing the input variables passed on from the UI definition.\r\n- The output parameter is an object to be defined in this server funtion, containing the information of what we would like to plot in UI.\r\n- The session object is an environment that can be used to access information and functionality relating to the session.\r\nInside the function we will use the reactive( ) function to create a reactive expression (named ‘smp’ in the below code). The purpose of this step is to tell the server to watch for the changes in inputs. Also, we define the output object with renderPlot( ) which stores a rendered plot so that we can pass it back to the UI object for display. We can only call the reactive() expression within a render function or another reactive expression.\r\n\r\nui <- fluidPage(\r\n    numericInput(\"a\", \"a_label\", value = 10),\r\n    plotOutput(\"x\")\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n    smp <- reactive(sample(input$a, 20, replace = TRUE))\r\n    output$x <- renderPlot(plot(smp()))\r\n}\r\n\r\nshinyApp(ui, server)\r\n\r\nHow to create a plot reactive to more than one input\r\nWe can create a plot reactive to more than one input by simply defining multiple inputs with the help of --Input( ) functions. Inside the server function we can retrive the inputs by calling input with the $ sign. In the sample code given below, we use an additional numericInput( ) function to define another variable ‘b’ with label ‘b_label’. Other --Input( ) functions include checkboxInput( ), dateInput( ), selectInput( ), textAreaInput(), etc.\r\nSame as above, we need to pass on the plot function along with the input data to renderPlot( ). The output plot needs to be designed to accept multiple inputs and is then given back to the UI object for display.\r\n\r\nui <- fluidPage(\r\n    numericInput(\"a\", \"a_label\", value = 10),\r\n    numericInput(\"b\", \"b_label\", value = 1),\r\n    plotOutput(\"x\")\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n    smp <- reactive(sample(input$a, input$b, replace = TRUE))\r\n    output$x <- renderPlot(plot(smp()))\r\n}\r\n\r\nshinyApp(ui, server)\r\n\r\nHow to create more than one reactive output\r\nTo create more than one reactive output (for example, having a plot, a table and text to print on the screen), we need to add the same input into multiple renders. Specifically, inside the server function below, the passed-on input(s) can be assigned to renderPlot( ), renderTable( ) and renderText( ) simultaneously. After that, we send the output plot, table and text back to the corresponding --Output( ) functions inside the UI object so that they can be displayed in the layout. Other --Output( ) functions include imageOutput( ), verbatimTextOutput( ), htmlOutput( ), uiOutput( ), etc.\r\n\r\nui <- fluidPage(\r\n    numericInput(\"a\", \"a_label\", value = 10),\r\n    numericInput(\"b\", \"b_label\", value = 1),\r\n    textInput(\"c\", \"c_label\", value = \"apple\"),\r\n    plotOutput(\"x\"),\r\n    tableOutput(\"y\"),\r\n    textOutput(\"z\")\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n    smp <- reactive(sample(input$a, input$b, replace = TRUE))\r\n    txt <- reactive(input$c)\r\n    output$x <- renderPlot(plot(smp()))\r\n    output$y <- renderTable(list(mean(smp()), max(smp())))\r\n    output$z <- renderText(txt())\r\n}\r\n\r\nshinyApp(ui, server)\r\n\r\nLinks\r\nhttps://mastering-shiny.org\r\nhttps://mastering-shiny.org/basic-reactivity.html\r\nhttps://shiny.rstudio.com/tutorial/written-tutorial/lesson6/\r\nhttps://mastering-shiny.org/reactive-graph.html\r\nhttps://shiny.rstudio.com/reference/shiny/latest/session.html\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:14-07:00"
    },
    {
      "path": "group_2.html",
      "author": [],
      "contents": "\r\nResources for Learning Tableau\r\nBrief description\r\nTableau has an active community with many resources for Tableau beginners, including the Tableau Community Forum, Twitter community, and Youtube. Here we have curated a collection of online resources for those interested in learning Tableau.\r\nLong description\r\nFor beginners who have no idea what Tableau is, the following Youtube links can help them get up to speed with what it is all about on a high-level. These provide beginners with a birds-eye view of what the dashboard sets out to achieve, how to interact with it and what use cases it is applicable for: - What is Tableau? (In 10 mins) - Getting started with Tableau\r\nFor data analysts who are just getting started with using Tableau, the following videos can help orientate fresh users with the actual dashboard and navigate the tools around the software: - Tableau Basics for Beginners - Tableau for Data Science and Data Visualization - Crash Course - Tableau Public: How-To Videos\r\nOther useful website/blogpost tutorials for beginners include: - Comprehensive Tutorial for Tableau Beginners - Data Visualisation with Tableau - From a Beginner Perspective: Understanding Visualization & Building charts with Tableau\r\nFor inspiration and examples of Tableau Dashboards: - Tableau Public Page (Examples of Tableau Dashboards) - Tableau Viz of the Day\r\nComplete List of Links\r\nWebsites & Blogposts\r\nOnline tutorials that have well-curated curriculum that guide learners through building dashboards on Tableau: - Comprehensive Tutorial for Tableau Beginners - Tableau Public: How-To Videos - simplilearn: Tableau Tutorial\r\nMedium blogposts that provide an initial introduction on how to use Tableau to make dashboards: - Data Visualisation with Tableau - From a Beginner Perspective: Understanding Visualization & Building charts with Tableau\r\nFor examples on what Tableau visualizations look like, here are some cool visualizations done on Tableau: - Tableau Viz of the Day - Information is Beautiful\r\nYoutube\r\nIntro to Tableau\r\nWhat is Tableau? (In 10 mins)\r\nGetting started with Tableau\r\n\r\nTableau Basics\r\nTableau Basics for Beginners\r\nTableau for Data Science and Data Visualization - Crash Course\r\n\r\nPodcasts\r\nThe Tableau World Podcast: interviews with Tableau users and updates about new releases and conferences\r\nTwitter\r\nTableau Twitter Page\r\nTableau Public Page (Examples of Tableau Dashboards)\r\nTableau Visionaries Twitter List: Leaders in the Tableau Community\r\nCommunities\r\nTableau Community Forums: includes discussions and help forums, and user groups for new users\r\nWeekly Tableau challenges and datasets for practice:\r\nMakeover Monday\r\nWorkout Wednesday\r\n\r\nConferences & Workshops\r\nTableau Annual Conference\r\nTableau Community Events/Webinars\r\nTableau Viz Design Workshop\r\nA collaborative and interactive workshop for Tableau users to work together to learn and implement visualization best practices on their own dashboards.\r\n\r\n",
      "last_modified": "2022-03-28T19:41:15-07:00"
    },
    {
      "path": "group_20.html",
      "title": "Reactive Plot",
      "description": "Tableau",
      "author": [],
      "contents": "\r\nBrief description\r\nTableau is a visualization software used in businesses to create static and dynamic plots that can easily be shared within and across organizations. Founded in 2003 through a computer science project at Stanford, Tableau introduces a more “drag-and-drop” approach when it comes to data viz platform. Unlike Dash, Tableau requires paid subscription and the company has a community and foundation to support client care. Some of the big name corporations such as Coca Cola, Nokia, Forbes, ebay, Dell etc are enterprise clients of Tableau. It all starts with choosing the right data type to import in tableau through drop-down interface. Then once the data is imported the data can be browsed in a tabuar fashion and several variables can be set according to their properties such as numeric, categorical, string, etc. There are several side bars in Tablaeu interface, which holds different sections controlling input source (sheets), plot type, and also numbers of plots. The canvas of the dashboard can be filled with multiple plots showing multiple reactive plots. By selecting and de-selecting sheets, data sources can be controlled. Finally, the dashboard can be deployed to a webpage or can be saved stand-alone to view offline. \r\nLong description\r\nBasic way of creating a reactive plot\r\nA reactive plot is a system by which you can instantly update your data constructs and the graphs, charts, and other visual cues to tell your story in real time. A reactive plot has several steps:\r\nA session begins\r\nExecution begins\r\nReading a reactive expression\r\nReading an input\r\nReactive expression completes\r\nOutput completes \r\nThe next output executes\r\nExecution completes, outputs flushed\r\nInvalidating new and changed inputs\r\nNotifying dependencies\r\nRemoving relationships\r\nRe-execution\r\n\r\nTableau uses drop-down menus and drag-and-drop methods usually when it comes to creating a plot. First it takes in data. This can be in several format. The data can be imported through the import option from the drop-down menu.\r\nImporting file\r\n After importing the data several metrics can be set from the information from the data:\r\nChoosing sheets\r\n After figuring out what do we need to visualize we can select the appropriate method from the drop-down menu:\r\nChoosing methods\r\n This will create plots like the following:\r\nScatter plot\r\n The reactivity can be controlled through the many switches along the side-bar:\r\nChoosing from Side bar\r\n\r\nReactive plot with more than one input\r\nIn the plot below we can also see that we can create a plot that react to multiple inputs by adding more filters and editing these filters. We can drag multiple data fields to the “filter” section and customize each filter after clicking on “edit filter.” Alternatively, we can also click on multiple data fields (inputs) and click on “show filter,” then the inputs will show under the “filter” section. These filters, such as sliders and check boxes, usually will show on the right-hand side of the Tableau screen.\r\nChoosing multiple inputs\r\n\r\nCreating more than one reactive output\r\nWe can visualize multiple plots derived from multiple data source (sheets) through Tablaeu. We can compile all the plots into sheets and then compile worksheets, dashboards or stories. For each plot, we can make them reactive using above mentioned methods.\r\nMultiple plots\r\n Finally our reactive plot or dashboard can be deployed to a webpage for viewing:\r\nReactive dashboard\r\n\r\nLinks\r\nhttps://www.tableau.com\r\nhttps://hfboyce.github.io/tableau_course/intro.html\r\nhttps://github.com/hfboyce/mds_tableau_workshop\r\nhttps://help.tableau.com/current/guides/get-started-tutorial/en-us/get-started-tutorial-build.htm\r\nhttp://www.ttdatavis.onthinktanks.org/how-tos/how-to-create-interactive-dashboards-with-tableau-public\r\nhttps://www.tableau.com/about/blog/2012/7/filtering-parameters-18326\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:16-07:00"
    },
    {
      "path": "group_21.html",
      "title": "Reactive Plots",
      "description": "Dash",
      "author": [],
      "contents": "\r\nReactivity - How do you generate a reactive plot? Can you indicate (1) the basic way to create a reactive plot, (2) how to create a plot reactive to more than one input and, (3) how to create more than one reactive output (for example, having a plot and text to print on the screen)?\r\nReactive Plot in Dash\r\nBrief description\r\nDash offers the callback function with the new value of the input property, and Dash updates the property of the output component with whatever was returned by the function. So the basic way to create a reactive plot is to make a connection between input data and output data. This will be done by adding a callback function. We can choose any name for the function which is written in the @app.callback decorator, then move the plot function down under the app.layout just like what we did in lecture notes.\r\nTo create a plot reactive to more than one input is similar to the basic reactive plot, we need to add other inputs to the callback decorator, then update the plot function and app.layout to be designed to accept multiple inputs.\r\nTo create more than one reactive output(for example, having a plot and text to print on the screen) is basically similar to plot reactive to more than one input, we need to list all the properties to update in app.callback, and return that many items from the callback. Also, we need to update the plot function and app.layout with corresponding changes.\r\nLong description\r\nThe basic way to create a reactive plot is to make a connection between input data and output data. This will be done by adding a callback function, for callback functions, they are automatically called by Dash whenever an input component’s property changes, so these will update some property in the output. We can also name the function which is written in the @app.callback decorator like a dropdown, a slider bar, and markdown text data. Then we need to move the plot function down under the app.layout and then we use the callback decorator directly on this function (worth mentioning, The Dash Core Components (dash.dcc) module includes a Graph component called dcc.Graph. dcc.Graph renders interactive data visualizations using the open source plotly.js JavaScript graphing library). After the input changes, the function wrapped by the callback decorator will get called automatically. All in all, Dash provides this callback function with the new value of the input property as its argument, and Dash updates the property of the output component with whatever was returned by the function, that is, whenever a cell changes (the input), all the cells that depend on that cell (the outputs) will get updated automatically. This is the basic way to create a reactive plot by Dash.\r\nIn Dash, the output can have multiple input components. To create a plot reactive to more than one input is basically similar to the basic reactive plot, we need to add other inputs to the callback decorator @app.callback, also update the plot function and app.layout. The input arguments of the callback are the current value of each of the input properties, in the order that they were specified. This is worth mentioning when a Input updates once (i.e. a user can only change the value of a single Dropdown in a given moment), Dash collects the current state of all specified input properties and passes them to the callback function. These callback functions are always guaranteed to receive the newest state of the application. See below for an example from 532 lecture:\r\ncars = data.cars()\r\n# Setup app and layout/frontend\r\napp = Dash(__name__,  external_stylesheets=['https://codepen.io/chriddyp/pen/bWLwgP.css'])\r\napp.layout = html.Div([\r\n    html.Iframe(\r\n        id='scatter',\r\n        style={'border-width': '0', 'width': '100%', 'height': '400px'}),\r\n    dcc.Dropdown(\r\n        id='xcol-widget',\r\n        value='Horsepower',  # REQUIRED to show the plot on the first page load\r\n        options=[{'label': col, 'value': col} for col in cars.columns])])\r\n    dcc.Dropdown(\r\n        id='ycol-widget',\r\n        value='Displacement',\r\n        options=[{'label': col, 'value': col} for col in cars.columns])\r\n@app.callback(\r\n    Output('scatter', 'srcDoc'),\r\n    Input('xcol-widget', 'value'),\r\n    Input('ycol-widget', 'value'))\r\ndef plot_altair(xcol, ycol):\r\n    chart = alt.Chart(cars).mark_point().encode(\r\n        x=xcol,\r\n        y=ycol,\r\n        tooltip='Horsepower').interactive()\r\n    return chart.to_html()\r\nTo create more than one reactive output (for example, having a plot and text to print on the screen) is basically similar to plot reactive to more than one input, we need to list all the properties to update in @app.callback decorator, and return the same number of items from the callback. Still, we need to update the plot function and app.layout with corresponding changes to make a reactive plot work. In lecture notes, it also mentioned we can define an output area and link it to the plot function as the output area, we can use a Div and the decorated function will now take an additional output in the decorator and return two values instead of one. See below for an example from 532 lecture:\r\n@app.callback(\r\n    Output('scatter', 'srcDoc'),\r\n    Output('mean-x-div', 'children'),  # This is the ID of our new output Div\r\n    Input('xcol-widget', 'value'),\r\n    Input('ycol-widget', 'value'))\r\ndef plot_altair(xcol, ycol):\r\n    chart = alt.Chart(cars).mark_point().encode(\r\n        x=xcol,\r\n        y=ycol,\r\n        tooltip='Horsepower').interactive()\r\n    return chart.to_html(), f'The mean of {xcol} is {cars[xcol].mean().round(1)}'\r\nLinks\r\nSome useful links are included below if wish to learn more: * https://dash.plotly.com/basic-callbacks * https://dash.plotly.com/basic-callbacks#dash-app-layout-with-figure-and-slider * https://dash.plotly.com/basic-callbacks#dash-app-with-multiple-outputs * https://dash.plotly.com/basic-callbacks#dash-app-with-multiple-inputs * https://stackoverflow.com/questions/45837031/is-there-a-better-way-to-perform-multiple-output-with-dash-by-plotly * https://budavariam.github.io/posts/2021/04/05/plotly-dash-development-tips/\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:16-07:00"
    },
    {
      "path": "group_22.html",
      "title": "Frontend",
      "description": "Shiny",
      "author": [],
      "contents": "\r\nBrief description\r\nA shiny app can be rapidly deployed by an R-developer in a matter of a few hours. Shiny high-level app elements are controlled through layout functions and complex and multi-page layouts are easily possible. Shiny is built on Bootstrap, but Bootstrap knowledge is not required to create UIs in shiny. There is a bit of flexibility to create additional Bootstrap, HTML, CSS components that are not contained in shiny, and a number of JavaScript events are also supported.\r\nLong description\r\nThere are a number of resources available to walk users through basic shiny layouts. + https://shiny.rstudio.com/tutorial/written-tutorial/lesson2/ + https://mastering-shiny.org/basic-ui.html + https://mastering-shiny.org/action-layout.html + https://bookdown.org/hadrien/how_to_build_a_shiny_app_from_scratch/user-interface.html\r\nA shiny app can be rapidly deployed by an R-developer in a matter of a few hours. Shiny high-level app elements are controlled through layout functions and complex and multi-page layouts are easily possible.\r\nShiny is built on Bootstrap, but Bootstrap knowledge is not required to create UIs in shiny. There is flexibility to create Bootstrap components that are not contained in shiny through “utility classes.” Customization is possible through the addition of CSS or HTML code, events can be managed with JavaScript, and there are also a number of extensions available for shiny on GitHub.\r\nThe layout is controlled by layout functions that control high-level elements of the page. Complex pages are possible utilizing multi-column and row formatting. Multi-page layouts are possible through the use of tabsets, navlists and/or navbars. Shiny also supports responsive layout through Bootstrap, so the app can adapt its grid system to various devices.\r\nIn general, the layout could be heavily customized in a very comprehensive and simple way. ### Links\r\nhttps://shiny.rstudio.com > + https://shiny.rstudio.com/tutorial/written-tutorial/lesson2/ > + https://shiny.rstudio.com/articles/#user-interface\r\nhttps://mastering-shiny.org/ > + https://mastering-shiny.org/basic-ui.html > + https://mastering-shiny.org/action-layout.html\r\nhttps://bookdown.org/hadrien/how_to_build_a_shiny_app_from_scratch/\r\nhttps://github.com/nanxstats/awesome-shiny-extensions\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:17-07:00"
    },
    {
      "path": "group_23.html",
      "title": "Frontend",
      "description": "Tablaeu",
      "author": [],
      "contents": "\r\nBrief description\r\nTableau is a standalone application of its own, and no coding is involved for the frontend layout. The GUI design consists of dragging and dropping pre-built chart objects and mapping the features to the axes and legend. Nonetheless, it is worth noting that it is possible to use bootstrap with Tableau. There are several layout techniques within Tableau. There are options such as size, floating, tiled and containers. The user can easily customize the size of the dashboard by choosing a fixed, range or automatic sizing. Furthermore, the user can easily customize between a tiled or floating (or combination of both) dashboard. A floating object can be layered on top of the other objects which can have a fixed size and position, whereas a tiled object is organized in a single layer which adjusts in size given the dashboard size and the surrounding objects. Furthermore, the user can customize the containers which are dashboard objects that contain other objects, and they can be customized to be horizontal or vertical. Overall, using Tableau, the users can customize complex layout designs which are easy to learn, fast to deploy and intuitive.\r\nLong description\r\nThere are many documentations that can help the user find how to create layout designs with Tableau. A couple of the sources are listed under the links section.\r\nTableau is a standalone application of its own, and no coding is involved for the frontend layout. The GUI design consists of dragging and dropping pre-built chart objects and mapping the features to the axes and legend. Nonetheless, it is worth noting that it is possible to use bootstrap with Tableau. For instance, this app has been developed using Tableau with the integration of Bootstrap 5 library.\r\nThere are several layout techniques within Tableau. There are options such as size, floating, tiled and containers. When sizing the dashboard, the user can use 3 different options such as fixed, range and automatic sizing. In addition to sizing, the user can use a tiled or floating (or combination of both) dashboard. A floating object can be layered on top of the other objects which can have a fixed size and position, whereas a tiled object is organized in a single layer which adjusts in size given the dashboard size and the surrounding objects. Furthermore, the user can customize the containers which are dashboard objects that contain other objects, and they can be customized to be horizontal or vertical.\r\nOverall, Tableau is very easy to learn, fast to deploy and intuitive to the user. There are many guides online that explain and walk the user through the steps to create and customize complex layout designs.\r\nLinks\r\nhttps://help.tableau.com/current/pro/desktop/en-us/dashboards_organize_floatingandtiled.htm\r\nhttps://danielcaroli.com/blog/2021/5/24/responsive-dashboard-design-in-tableau\r\nhttps://datacrunchcorp.com/tableau-dashboard-examples/\r\nhttps://interworks.com/blog/rcurtis/2017/05/12/tableau-deep-dive-dashboard-design-layout-structure/\r\nhttps://public.tableau.com/en-us/s/blog/2016/08/dashboard-design-tiled-vs-floating-layouts\r\nhttps://www.tableau.com/drive/floating-versus-tiled-dashboards\r\nhttps://www.wisdomaxis.com/technology/software/tableau/interview-questions/tableau-dashboard-layouts-difference-between-tiled-vs-floating.php\r\nhttps://www.tableautemplates.com/\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:18-07:00"
    },
    {
      "path": "group_24.html",
      "title": "Frontend",
      "description": "Dash",
      "author": [],
      "contents": "\r\nDash: Frontend\r\nBrief description\r\nPlotly’s Dash provides a tighlty-integrated frontend that can be written in Python. It is used to build a graphical user interface around the data analysis code. The main aspects of a Dash frontend are the multitude of components, the interactivity between those components, and the customizability supported by those components. Users can design the look of the application using the application’s layout by creating interactive components like graphs, dropdowns, sliders, or date ranges and can even add HTML tags. Dash also provides a lot of flexibility when it comes to customizing the look of the application. Users can use their own CSS or JavaScript files, set a favicon, and embed images, among other advanced options.\r\nLong description\r\nPlotly’s Dash application is a graphical user interface library for creating analytical web applications. Users of Python who perform data analysis, data exploration, visualization, modelling, instrument control, and reporting will find immediate use for Dash.\r\nDash uses several components that help in building out the “layout” of the graphical user interface. These components are typically prepackaged in Python libraries. While some of these components come built-in with Dash, the rest need to be installed separately. Some of the most common components that almost evey application includes are: 1. Dash HTML Components: This provides Python wrappers for HTML elements. It can be used to create elements like headings, paragraphs, or lists. 2. Dash Core Components: This provides Python abstractions for creating interactive user interfaces. It can be used to create interactive elements such as dropdowns, sliders, radio buttons, checkboxes, and graphs.\r\nDash’s interactivity is based on a reactive programming paradigm. This means that you can link components with elements of your app that you want to update. If a user interacts with an input component like a dropdown or a range slider, then the output, such as a graph, will react automatically to the changes in the input.\r\nDash’s customizability caters to two main areas: 1. Addition of external assets to the application such as images or videos. 2. Customizing the styles of the components such as font, background, etc.\r\nLinks\r\nhttps://plotly.com/dash/\r\nhttps://realpython.com/python-dash/\r\nhttps://medium.com/plotly/introducing-dash-5ecf7191b503\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:19-07:00"
    },
    {
      "path": "group_25.html",
      "title": "Scope",
      "description": "Shiny",
      "author": [],
      "contents": "\r\nBrief description\r\nShiny is and R package, and as such is linked to the popularity of R language. While R is still a niche language compared to Python, it is quickly rising in the academia and the research community in general. In 2014 it was in 4th place behind SPSS (source: Muenchen, 2014), SAS and MATLAB. By 2018, R usage jumped from ~20,000 articles to 60,000 articles (source: Muenchen, 2018). With this continuing growth, Shiny will also increase in popularity. It is unlikely to surpass Dash in the near future but it still remains the first choice for R users.\r\nLong description\r\nNumber of related questions in Stack Overflow\r\n24,963 questions in total, 9,091 questions with no upvoted or accepted answers (source)\r\nRelevant forums and chats\r\nThe first place to look for help with Shiny is the official RStudio Community, where RStudio developers will monitor and answer questions perodically. You can also check the “shiny” tag on Stack Overflow for existing answers, or post your own question. There are small communities on social media like Reddit (rshiny subreddit), and Twitter with #rstats and #shiny hashtag.\r\nPopularity and main users\r\n\r\nReport the number of issues opened in the main repository.\r\n\r\nThere are 652 open issues in the main repository and 1679 closed (source: GitHub).\r\nR is now the second most used language among scholars behind SPSS. The number of data science jobs requiring R is about half of Python requirement. R is now the 5th most common language in Data Science job requirements behind giants such as Python and SQL (source: Muenchen, 2018). Since Shiny is part of the R ecosystem, it is fair to assume that this is a very popular option but not as prevalent as Python-based dashboards.\r\nSimilarly to Dash, Shiny App does not require HTML or CSS knowledge, allowing for a low barrier of entry. However despite its earlier release date in 2012, Shiny does not have as many starts on GitHub. Dash by Plotly quickly rose to success since its launch about in 2014 ago (source: Schmitt, 2020). Shiny currently has 4.6k stars while Dash has 16.1.\r\nIt is fairly difficult to gauge Shiny usage in absolute terms, but one article from 2017 demonstrates that shiny is slowly but steadily growing over the course of that year (source: Robinson, 2017).\r\nShiny is the main dashboard tool for R users. Considering that this is now the second most popular language for scholars and instructors, the academia is the main user of this technology. In addition, researchers in other fields such as healthcare and government (source: Robinson, 2017) as well as some developers also utilize shiny according to the Mastering Shiny book authors. SPSS also features dashboards but they do not appear to be hosted online (source: IBM).\r\nOverall, Shiny app will only be as popular as its companion, R. 2021, R is still in 34th place on GitHub public repositories, compared to Python in 2nd place (source: GitHut2.0, 2021). While some worried about “Python stranging R to death”, this appears to be not the case as R usage rose sharply after a recent decline (source: Datanami, 2020).\r\nLinks\r\nOfficial webpage of Shiny\r\nGitHub Repo of Shiny\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:20-07:00"
    },
    {
      "path": "group_26.html",
      "title": "Scope",
      "description": "Tableau",
      "author": [],
      "contents": "\r\nBrief description\r\nTableau is a comprehensive data analysis platform which is widely used in both industry and academia. While Tableau is used in almost every industry it is primarily favored by tech companies in the United States. It is also quite prevalent in academia, being used by researchers, students and administrators alike, though it is more difficult to estimate its ‘market share’ in this space vs other similar tools. A few of the main reasons for Tableau’s wide-spread use are its flexibility, ease of use, ability to handle large data values and compatibility across multiple devices/platforms.\r\nLong description\r\nMain Repository Stars\r\nTableau does not appear to have a single main repository. Their main github account contains 63 repositories which each range from 10 to 150 stars.\r\nIssues opened in main repository\r\nTableau does not appear to have a single main repository. Their main github account contains 63 repositories most of which have less than 10 open issues and some with as many as 80.\r\nOpen questions in stack overflow\r\nThere are currently 5,262 questions open in stack overflow, 1,117 of which have not been answered. source\r\nrelevant forums and chats\r\nOfficial community forumStack OverflowReddit SubgroupDiscord Server Discord is a popular VOIP platformTwitterFacebook\r\nPopularity and Use\r\nFounded in 2003 following a research project at Stanford University, Tableau has grown to become one of the most popular data visualization tools in the world today. Tableau offers a wide array of tools which collectively work together to wrangle, analyze and visualize data. Tableau is a powerful tool that can connect to any type of database and generates its own queries to work with huge data sets, so we can make patterns in just a few seconds, while the same would take minutes or hours with Excel. Additionally, it has an intelligent dashboard that provides a quick solution for the most commonly asked questions by users. (source: Aventis, Wikipedia)\r\nAccording to Grazitti, Tableau has been the leader in the data visualization space for 6 years. With an estimated 64,000 companies using Tableau, it has approximately 16% market share (almost twice that of Microsoft’s power BI). While it has a presence in almost every major sector, Tableau’s primary client base are tech companies in the United States (source: Enlyft). Tableau’s immense popularity can also be seen in the success of the company itself, which has grown its revenues from 62 Million to 1.4 Billion in only 10 years (source: Financial Statements).\r\nTableau appears to be no less prevalent in academia, where it reports use by hundreds of leading institutions (source: Tableau). Tableau also appears to be attempting to grow its influence in the academic sphere by making itself freely accessible to students. This also appears to be a sound strategy for growing overall market share as graduating students take their Tableau knowledge (and preference) into industry.\r\nSome key drivers for Tableau’s popularity in the business space are:\r\nIt is relatively quick and easy to use\r\nIt can be learned and implemented by non-data scientists\r\nIt is able to handle large amounts of data\r\nIts visualizations/dashboards are compatible across multiple devices\r\nEasily integrates with scripting languages like R and Python\r\nBuilt-in data wrangling\r\nsources: Grazitti, Evolytics, Youtube\r\nLinks\r\nOfficial Website\r\nMain Github Repository\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:20-07:00"
    },
    {
      "path": "group_27.html",
      "title": "Scope",
      "description": "Dash",
      "author": [],
      "contents": "\r\nBrief description\r\nNumber of stars in the main repository: 16,048\r\nThere are 22,334,316 questions open on Stack Overflow, but if we do a keyword search with “Dash”, there are 500 questions open.\r\nThere are a few forums apart from Stack Overflow, where one can post their questions related to Dash. A few of them are:\r\n1. Plotly\r\n2. Quora\r\n3. qandeelacademy\r\nNumber of issues opened in the main repository: 557\r\nLong description\r\nHow popular is the Dash app?\r\nThe current industry leaders in the python dashboarding ecosystem are Streamlit, Plotly Dash, Voilà, and Panel.\r\nDeployment\r\nDash apps can be deployed on any servers which support Flask app deployment. Nearly all of the major cloud providers support deployment of Flask applications, and consequently Dash applications. It is possible to deploy a Dash application to AWS, Azure, Google Cloud Platform, and many other cloud providers. Dash apps can also be deployed on an Apache webserver using the ‘mod_swgi’ Apache HTTP Server module, and also on an Nginx webserver.\r\nAuthentication\r\nDash OpenSource provides users with basic authentication measures to include in their Dash applications. It must be installed separately to dash using the command pip install dash-auth, and then imported at the top of your Python script using import dash-auth.\r\nMaintenance\r\nDash maintains a clear changelog, and so on returning to an application, one has to simply read the release notes that had been uploaded during ones absence to find any new features that had been added, or if any features had deprecation warnings.\r\nIs it mostly used in academia or industry (or both)?\r\nPlotly Dash is popular in both fields. It’s different because it’s free, online, doesn’t need to be downloaded, and supports collaboration. Plotly Dash also lets one make and share beautiful, interactive graphs.\r\nStudents\r\nPlotly Dash is a platform for learning about and doing data visualization. They have tutorials, trainings, videos, a feed of graphs, and blog posts on both introductory and advanced topics. For example, what line types are available? When and how should you change the opacity of a scatter plot? The goal is to be easy for first-time, non-technical users yet powerful and scientific for advanced users.\r\nProfessionals\r\nFor technical users, they offer APIs and training for scientific graphing languages and libraries: MATLAB, Python, R, Node.js, Julia, and Excel. Their local deployments, private sharing, and educational packages allow labs and educational teams to use Dash on-premises. Plotly Dash is used on-premise by a quantum research lab at the University of Copenhagen, SpaceX, and Aerospace Corporation.\r\nLinks\r\nOfficial webpage of DashPublic repository\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:21-07:00"
    },
    {
      "path": "group_28.html",
      "title": "History",
      "description": "Shiny",
      "author": [],
      "contents": "\r\nShiny History\r\nBrief description\r\nThe open-source library Shiny was developed in 2012 by RStudio to help users build simple interactive web apps with no HTML, CSS, or JavaScript experience. The library is only avaliable in R so it works seamlessly with RStudio and RMarkdown. RStudio is the current maintainer of the Shiny library, with the newest release (as of March 2022) being V1.7.1, which occurred in Oct 2021. Since 2012, there have been many updates to the library including adding support for shiny applications (V1.0.0), allowing asynchronous operations (V1.1.0), adding plot caching to improve the performance of apps, as well as better theming and accessibility (V1.6.0). Many of the improvements that have been made are to keep up with changes to the Bootstrap framework which is used by the Shiny library for building applications. With each new release, Shiny provides new features that allow for more functionality within the created apps as well as better performance. See their release history here to get a full description of the library’s update history.\r\nLong description\r\nCreated in 2012\r\nOpen source and maintained by RStudio and community\r\nSpecific the R\r\ncurrent version 1.7.1 (as of March 11 2022)\r\nhistory of big changes\r\nV1.0.0 (Feb 2014)\r\nbookmarking and support for testing shiny applications\r\n\r\nV1.1.0\r\nallows for asynchronous operations\r\ndifferent users an perform the same process\r\n\r\n\r\nV1.2.0\r\nadding plot caching to improve performance and scalability\r\nimprove responsiveness of apps\r\n\r\n\r\nV1.6.0\r\nbetter theming\r\nimproved accessibility for screen reader and keyboard users\r\n\r\n\r\nMany of their improvements have been to keep up with changes in the Bootstrap framework used for building apps\r\nLinks\r\nhttps://github.com/rstudio/shiny/blob/main/NEWS.md\r\nhttps://engineering-shiny.org/foreword.html\r\nhttps://github.com/rstudio/shiny/tags\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:22-07:00"
    },
    {
      "path": "group_29.html",
      "title": "History",
      "description": "Tableau",
      "author": [],
      "contents": "\r\nBrief description\r\nTableau was created in 2003 by founders Chris Stolte, Pat Hanrahan, and Christian Chabot, as a result of a computer science project at Stanford. Their goal was to improve the flow of analysis as well as creating a way for data visualization to be more easily accessed by the public.\r\nIn 2019 the company was acquired by a customer relationship management company called Salesforce. The companies mission stayed the same but now has become stronger and more popular then ever before.\r\nTableau is mainly used with SQl as it can be easily connected to databases, but tableau can also be used by many other programming languages such as python or java or C through special packages such as Tableau SDK, that allow users to create Tableau extracts and thus transfer their work/data onto the Tableau application for it to be visualized for any audience.\r\nLong description\r\nWhen was it created?\r\nTableau was said to be created in 2003. It was created as a result of a computer science project at Stanford University. The project aimed to improve the smoothness of analysis and to be able to make data more easily accessed for people through visualization.\r\nChris Stolte, Pat Hanrahan, and Christian Chabot, are the founders and creators of the company and patented Tableau’s technology called: VizQL which essentially can visually expresses data by using drag-and-drop actions into data queries through an easy to use and navigate interface.\r\nSince the foundation of Tableau, the company has continuously invested in research and development. The have been developing solutions to help anyone that may be working with data so that they can be able to get to answers faster and uncover insights in their data. #### Are other companies involved in the current development of this technology?\r\nNo, not particularly, but in 2019 Tableau was bought by a CRM company named Salesforce, they claimed that their mission would remain the same. Tableau still wants to help the public visualize and understand their data in an easy to use software. we see today that many many of the worlds top organizations everywhere—from non-profits to global enterprises, as well as across all industries and departments are using Tableau to ‘drive change’ with data. So although Tableau may not have companies besides Salesforce involved in their immediate development. They have thousands of companies world wide using their products and providing insightful feedback which continues to help the company grow and improve.\r\nIs possible to be used with different languages (Python / R / Julia / excel / others)?\r\nYes Tableau is primarily used with SQl. You are able to connect databases and run queries from within tableau. Although Tableau is meant to make data visualization user friendly and works with mostly easy to use tools such as drag and drop.\r\nAfter doing a bit more research there is something called Tableau SDK. Tableau SDk is a set of functions that can be called from within C, C++, Java or Python to create tableau extracts and publishing them on tableau server. so to answer the question above yes Tableau can be used with different programming languages.\r\nSo in other words you can take data from anywhere you would like, clean it and edit it using any of the compatible programming languages. Do any advanced analytics that you want and then just export the data to a tde file. That file can be directly read by Tableau or can be be shared on Tableau Server for visualization and sharing.\r\nThis is a very exciting thing as take for example I am able to import a dataset in Python and use some of the cool machine learning libraries we have learned in MDS to predict some sort of outcome of interest. After I am done with the model, I can export the model i have created into a data extract using Tableau SDK and publish it directly to Tableau Server where i can then visualize the results and share it with anyone i would like.\r\nLinks\r\nhttps://www.tableau.com/solutions/high-technology-analytics\r\nhttps://www.doingdata.org/blog/a-beginners-guide-to-tableau-sdk-an-introduction#:~:text=Tableau%20SDK%20is%20a%20set,publishing%20them%20on%20tableau%20server.\r\nhttps://www.tableau.com/why-tableau/what-is-tableau#:~:text=Tableau%20disrupted%20business%20intelligence%20with,accessible%20to%20people%20through%20visualization.\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:23-07:00"
    },
    {
      "path": "group_3.html",
      "title": "Resources",
      "description": "Dash",
      "author": [],
      "contents": "\r\nBrief description\r\nDash is new in the Python ecosystem which was first introduced in 2017. It is a free Python library for creating reactive, web-based applications. This document is to give users an extensive list of resources to learn Dash. The list is composed of three main parts of resources, namely Introduction to Dash, Tutorials, and Public curated resources.\r\nLong description\r\nDash is an open source library for creating reactive, web-based applications, which was released under the permissive MIT license. In 2017 Plotly launched the initial beta version of Dash, with the framework’s initial release coming in early 2019. In 2019 Dash for R was created, and in 2020 Dash for Julia was created, leading to a language-agnostic framework built upon the most common data science programming languages. Developing web application in Dash is straight forward as its uses Python programming as its base and it is made on python flask framework. Those who use Python for data analysis, data exploration, visualization, modelling, instrument control, and reporting will find immediate use for Dash. This document is to give users an extensive list of resources to learn Dash.\r\nTo get to know Dash better as a newbie, the following tutorials and articles can generalize what it is all about from basic level to a high-level. Firstly, it is suggested that beginners should start with some resources about Introduction to Dash. Youtube is a great resources since it contains short videos with good contents without making the new learners feeling overwhelmed. Once getting used to the basic idea of Dash, it is a good time to move forward with more advanced Tutorials to dig deeper into each specific topics of Dash. Again, the Dash Plottly Channel on Youtube is a very good resource. During the process of working with Dash, if learners encounter any obstacles, Dash communities and other resources under Public curated resources are very useful.\r\nIntroduction to Dash\r\nShort introduction to Dash on various platform.\r\nYoutube Resources - Dash - A New Framework for Building User Interfaces - Introduction to Dash Plotly - Data Visualization in Python - Dash in 5 Minutes\r\nPublications - Dash for Beginners : Python Dashboards - Introduction to Dash in Python - GeeksforGeeks Note: You might need to register to access to these resources.\r\nWebpages - Getting started with data visualization with Dash - Develop Data Visualization Interfaces in Python With Dash\r\nTutorials\r\nOnline tutorials with comprehensive curriculum that guide learners/users through building dashboards on Dash:\r\nYoutube Resources This is a Youtube channel of Adam who is passionate about Dash Plotly. This channel has a variety of topics from basic to advance. - Dash Plotty Channel\r\nThis is Youtube series includes very short videos which will be convenient for busy learners. - Plotly Dash Complete Tutorial\r\nThis 1-hour video provides complete coverage of Plotly with many real world examples. -Plotly Tutorial 2021\r\nPublications - Advanced Guide to Plotly Dash Interactive Visualizations - Advancing to Professional Dashboard with Python, using Dash - Challenges with Dash\r\nNote: You might need to register to access to these resources.\r\nWebpages/Blogposts\r\nTwo technologies comparison for building web applications: - Dash vs. Shiny\r\nA blogpost to compare strengths and weaknesses of the two libraries. All in all, there’s no best option. - Dash vs. Bokeh\r\nPublic curated resources\r\nCommunities\r\nThese communities include discussions, Q&A, help forums which are great resources for new learners. - Dash Community - Dash Stackoverflow Community\r\nGitHub\r\nA repository compiles great resources. - Awesome Dash Github Repo\r\nDash recipes\r\nWebinars/Webpages\r\nTo find inspiration for your projects, these examples are very helpful as they are a collection of data dashboards with real life data, for various topics. - Dashboards by Dash - Dash Gallery - Plotly Webbinars\r\nReferences\r\nhttps://medium.datadriveninvestor.com/plotly-dash-everything-you-need-to-know-bc09a5e45395\r\nhttps://medium.com/plotly/introducing-dash-5ecf7191b503\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:24-07:00"
    },
    {
      "path": "group_30.html",
      "title": "History",
      "description": "Dash",
      "author": [],
      "contents": "\r\nBrief description\r\nDash was created and released in 2017 as a Python library. Dash has grown to include implementation of R and Julia since 2019 and 2020 respectively. Plotly built Dash and supports its current development until now to allow people without advanced web development knowledge and coding skills to use Dash at no cost under the MIT license.\r\nLong description\r\nWhen was it created?\r\nDash was created and released in 2017 as a Python library.\r\nAre other companies involved in the current development of this technology?\r\nPlotly is a Canada-based company which built Dash and supports its current development until now. Plotly, as the company, open-sourced Dash and released it under an MIT license, so people can use Dash for free.\r\nThere is also a commercial companion that is shared by Plotly called Dash Enterprise. This service provides companies with support services including hosting, deploying, and handling authentication on Dash applications for certain amount of costs. But these features do not belong to Dash’s open source ecosystem.\r\nAdditionally, in order to build the user interface layer of Python, R and Julia, Dash teamed up with friends at Formidable which is known for world-class React application development and tooling.\r\nIs possible to be used with different languages.\r\nYes, Dash has grown to include implementations for other languages like R and Julia and F# (only experimental) which makes it much easier for data scientists to build analytically web applications without requiring advanced web development knowledge and coding skills.\r\nSince when?\r\nIt starts to be used with different languages like R since 2019 and Julia since 2020.\r\nLinks\r\nhttps://realpython.com/python-dash/#:~:text=in%20this%20tutorial.-,What%20Is%20Dash%3F,requiring%20advanced%20web%20development%20knowledge.\r\nhttps://dash.plotly.com/introduction\r\nhttps://medium.com/plotly/dash-is-react-for-python-r-and-julia-c75822d1cc24\r\nhttps://moderndata.plotly.com/dash-has-gone-full-r/\r\nhttps://medium.com/plotly/announcing-dash-for-julia-f017c90c6ef1\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:25-07:00"
    },
    {
      "path": "group_4.html",
      "title": "Performance + Examples",
      "description": "Shiny",
      "author": [],
      "contents": "\r\nBrief description\r\nTo increase the performance one has to act smart, and do all the redundant works before hand.\r\nThis is possible in following the basics:\r\n1) Writing codes in piecemeal and in functions(snippets)\r\n2) Using optimized algorithms to cure the bottlenecks\r\n3) Using DRY principle\r\nDoing caching when ever possible:\r\n1) Caching the API results\r\n2) Caching the plots\r\nScheduling redundant and back-end work.\r\nOther Avenues: please refer to the section below.\r\nLong description\r\nPart1:\r\nHow could we improve the performance of this dashboard?\r\nBasics:\r\nThe overall dashboards contains many parts(chunks), we should always focus on writing in piecemeal, and each part should be written in function. To improve the overall performance, we should find the part of of the overall dashboard that is running slow. Then we should take that part/snippet, try to find the bottleneck and if possible optimize it.\r\nUse faster functions, algorithms and use hashing as much as possible and less loops(basically reduce the Big O)\r\nFor Example: sum_value <- 0 for (i in 1:100) { sum_value <- sum_value + i ^ 2 }\r\nvs\r\nsum_value <- sum((1:100) ^ 2)\r\nWe should always follow the “DRY”(do not repeat yourself) principle.\r\nThere are other techniques discussed below:\r\nCaching:\r\nThe basic idea is to record the input to and output from every call to a function. When the function is called with a set of inputs it has already seen, it gives the output without recomputing, saving huge amount of time. Here we can use package like memoise. Memoise saves the results of new invocations of functions while reusing the answers from previous invocations of those functions.\r\nThe cache can be shared across multiple users, hence only the first users need to wait for output, everyone else can use the same cache for a speedy result. There are following three function that we can use for caching:\r\n1. cache_mem - storing cache in RAM (default)\r\n2. cache_filesystem(path) - storing cache on the local disk\r\n3. cache_s3(s3_bucket) - storage in the AWS S3 file database\r\nWe can use caching while pulling data through API or making humongous plots.\r\nCaching the API results: There are times when we refer to some data and procure it from APIs. Each time Rshiny has to hit the server to procure the data, this takes a lot of time. Caching APIs saves a lot of time.\r\nCaching plots: We can cache the plots so that the next time we load it, it will save us sometime.\r\nScheduling:\r\nScheduling a job separately when there is not much traffic, will save a lot of time. So when we call the Rshiny, it just have to work on a pre-cleaned data. Do a lot of pre-rendered work before hand rather than calling everything in the dashboard will save a lot of computing time.\r\nOther Avenues:\r\nBreaking the app into different tabs, rather than keeping everything in one.\r\nTaking user input, before running some big plots (sometime it might not be possible that users dont want it at all)\r\nSetting the user expectation by outrightly stating the running time\r\nPart2:\r\nProvide an extensive list of examples of relevant apps (published or in galleries or repos). Why are they relevant and given what criteria? Do you find more apps for industry or academia?\r\nFrench_Electricity\r\nParis_Metro\r\nRshiny_Example_Blog\r\nRshiny_Gallery\r\nRshiny_Github_Repo\r\nWhy are they relevant and given what criteria? Do you find more apps for industry or academia?\r\nIn the examples, either in the repos or in dashboards, we can find a lot of reference for our work, and learn from them either in optimizing the codes, or having a good interface.\r\nThe apps are used both in industries as well as in academia. Like the few link shared were of the French Electricity, French Traffic while others were from Finance & Healthcare Industry.\r\nLinks\r\nMastering_Rshiny\r\nKeynote_by_CTO_RStudio\r\nYoutube_video\r\n4_ways_improve_performance\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:27-07:00"
    },
    {
      "path": "group_5.html",
      "title": "Performance + Examples",
      "description": "Tableau",
      "author": [],
      "contents": "\r\nImproving performance of a Tableau dashboard\r\nIn general, for improving performance of dashboards using Tableau, the recommendations are as below:\r\nMinimize the number of variables/fields, minimize the number of records and optimize the data extractions.\r\nReduce the granularity of the data used for visualization.\r\nOptimize the number of filters provided in the dashboard and, if possible, materialize the queries from the data source.\r\nWe can also audit the performance of a dashboard, as in check for performance bottlenecks by running and interpreting the results of a feature provided, i.e. performance recording. This analysis can pinpoint performance issues, such as render times of a dashboard, query execution, geocoding, layout computations, etc. One of the results of this performance audit feature is a Performance Summary dashboard, which highlights the most time consuming events on our dashboard.\r\nExamples of relevant apps/dashboards published in galleries\r\nThe Tableau website has a gallery of dashboards created by the community. This gallery has a considerable collection of dashboards created for various visualization purposes. These examples cover dashboards created for industry, academic and personal use cases. If we search for dashboards created for education using the Gapminder data, we can find many examples, highlighting the insights that can be obtained from different facets of this dataset, i.e. population growth, global health and income, GDP, pollution, etc. All these examples created by the community of Tableau users, using different visualizations, help in furthering the fundamental goal of the creation of this dataset, i.e. promoting sustainable global development by increased use of statistics.\r\nCitations:\r\nHara, Nicholas. “6 Tips to Increase Dashboard Performance.” Tableau, 15 January 2016, https://www.tableau.com/about/blog/2016/1/5-tips-make-your-dashboards-more-performant-48574. “Tableau Gallery.” Tableau Public, https://public.tableau.com/app/discover/viz-of-the-day.\r\nLinks\r\nhttps://www.tableau.com/about/blog/2016/1/5-tips-make-your-dashboards-more-performant-48574\r\nhttps://public.tableau.com/app/discover/viz-of-the-day\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:27-07:00"
    },
    {
      "path": "group_6.html",
      "title": "Performance + Examples",
      "description": "Dash",
      "author": [],
      "contents": "\r\nBrief description\r\nDash is designed quite well for its purpose, so there is not really much room for large improvements, however there are some ideas that come to mind in terms of potential improvements that could be added.\r\nFirstly, in order to implement Dash, an organization or user is required to code the entire backend of the dashboard in Python. This raises the level of difficulty in terms of implementation for professional organizations, who want to implement a dashboard but do not necessarily have the coding expertise on their current team. A potential solution to this would be creating a simple graphical user interface for Dash, which would make it easier to build Apps with it, like how Tableau works. However this would require significant time investment to bring to fruition. Another potential weakness is that Dash make not protect the underlying data of the dashboard as well as a more commercial solution like Tableau.\r\nFurther, there is a lot of room for improvement in terms of the features that could be implemented into dash. This site contains an interesting comparison between the features offered by Tableau compared to Dash. There are several things that could be added to Dash such as better data management, real time analytics, or third party integrations.\r\nYou can find several examples of Dash apps here.\r\nAs Dash is very useful for AI and data science related apps, it appears that there are equal use cases in industry and academia. However it’s easier to find app examples that appear to be created for academic purposes. This may be because Dash is harder to use right out of the box relative to Tableau or other BI tools, which would make it harder for professional organizations to implement with ease.\r\nLong description\r\nPotential improvements\r\nDash is designed quite well for its purpose, so there is not really much room for large improvements, however there are some ideas that come to mind in terms of potential improvements that could be added.\r\nFirstly, in order to implement Dash, an organization or user is required to code the entire backend of the dashboard in Python. This raises the level of difficulty in terms of implementation for professional organizations, who want to implement a dashboard but do not necessarily have the coding expertise on their current team. A potential solution to this would be creating a simple graphical user interface for Dash, which would make it easier to build Apps with it, like how Tableau works. However this would require significant time investment to bring to fruition.\r\nAnother potential weakness is that Dash make not protect the underlying data of the dashboard as well as a more commercial solution like Tableau.\r\nFurther, there is a lot of room for improvement in terms of the features that could be implemented into dash. This site contains an interesting comparison between the features offered by Tableau compared to Dash. There are several things that could be added to Dash such as better data management, real time analytics, or third party integrations.\r\nExamples of Dash Apps and Dashboards\r\nYou can find several examples of Dash apps here. A few that are very interesting and relevant include:\r\nSupport Vector Machine Explorer: This is a dashboard that allows you to visually explore support vector machines.\r\nObject Detection Explorer: This is a dashboard that allows you to visually see what an object detection algorithm is detecting (with confidence levels) during a selected video that is playing.\r\nImage Annotation App: This is an app that can be used to annotate images.\r\nThese three key examples are all relevant as they are all related to data science or machine learning in some way. While the first is an example of classical machine learning, the former two are examples of deep learning. Further, these apps can help a user understand machine learning or deep learning from a visual aspect which can be helpful for learning purposes.\r\nHere are some additional examples that are not related to data science, but help show what Dash is also capable of:\r\nSKU Product Availability: An example of how a business could use Dash.\r\nWind Speed Streaming: A dashboard that visualizes wind spped.\r\nFIFA Football Players: A dashboard that compares and contrasts FIFA players.\r\nAcademic vs. Professional Use\r\nAs Dash is very useful for AI and data science related apps, it appears that there are equal use cases in industry and academia. However it’s easier to find app examples that appear to be created for academic purposes. This may be because Dash is harder to use right out of the box relative to Tableau or other BI tools, which would make it harder for professional organizations to implement with ease.\r\nAcademic use of Dash is also attractive since it can be used to visualize concepts, making them easier to teach. This can be seen in the previous example dashboards linked above.\r\nLinks\r\nSome useful links are included below if you wish to learn more.\r\nhttps://plotly.com/dash/\r\nhttps://www.capterra.com/data-visualization-software/compare/77260-178865/Tableau-vs-Plotly\r\nhttps://dash.gallery/Portal/\r\nhttps://dash.gallery/dash-svm/\r\nhttps://dash.gallery/dash-object-detection/\r\nhttps://dash.gallery/dash-image-annotation/\r\nhttps://dash.gallery/sku-analytics/\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:28-07:00"
    },
    {
      "path": "group_7.html",
      "title": "Deploying a dashboard on Shinyapp.io",
      "description": "Shiny",
      "author": [],
      "contents": "\r\nBrief description\r\nA dashboard is a graphical user interface for data visualization and interaction. Shiny app is one of the most popular dashboard applications, along with dash and tableau. In order to share the dashboard with users, deployment for public or internal access is necessary. There are multiple ways to deploy a Shiny app on the web. These include deployment to the cloud through Shinyapps.io, open-source virtual private cloud through the Shiny Servers, and commercially in a premises/ virtual private cloud using RStudio Connect. If you are a beginner, deployment on Shinyapps.io is your go-to option. Shinyapps.io is a flexible and easy-to-use choice. It allows users to deploy dashboards hosted on R Studio servers in a few minutes. It is suitable for hosting prototypes, individual projects, or even complex projects due to its simplicity. If you want to have more control and customization of your dashboard, another free but more advanced alternative is the Shiny open-source server. This method is securer because users can host multiple applications using the same server behind private firewalls, each with a unique URL. If you are looking for commercial deployment, the recommended option is through RStudio Connect. It is a standalone product that supports both Python and R, moreover, it can host applications, dashboards, and even Jupyter Notebook. Organizations not only have the flexibility to control the firewall or a VPC, but are also able to access other premium features, including integration with RStudio, easy scale-up, and web application support.\r\nLong description\r\nHost a Shiny app\r\nIn general, there are two main ways to host Shiny apps on the web: through servers hosted by RStudio or on personal servers. Under personal servers, there are two alternatives - open source and commercial.\r\nServers hosted by RStudio\r\nShinyapps.io is a flexible and easy-to-use cloud-based option to deploy apps as quickly as a few minutes. It is a software as service package hosted on servers operated by R Studio. It is suitable for hosting prototypes, individual projects, and more complex projects due to its ease of use. It can be used for free to host up to 5 apps, and if there is a need for more, there are tiered paid versions. Scalability is also straightforward as this method is cloud-based. However, the disadvantage is that there is no firewall protection for the app, so commercial or company-specific apps may not be suited for this type of deployment. (The Pricelist of this option is provided below.)\r\nPersonal servers\r\nThe open-source Shiny Server package has the advantage that it can run behind private firewalls and can be used to host multiple applications using the same server, each with a unique URL. The professional version of Shiny Server offers additional features such as access restrictions for the applications, SSL encryption, and performance management. Shiny Server open source is free, whereas the professional version is paid.\r\nThe recommended option for commercial deployment is through RStudio Connect, a standalone product that supports Python and R and can host applications, dashboards, and even Jupyter Notebooks. It is also integrated with Git and provides a user interface. The organization can control the deployed servers, whether on some server behind a firewall or a VPC. It also includes many premium features, including integration with RStudio, easy scale-up, and web application support. This option targets organization with considerable amount of users and only available for paid version.\r\nDeploy and Share a Shiny app through servers hosted by RStudio\r\nThe most common and efficient way to deploy a Shiny app is through servers hosted by RStudio. Here are the steps and charges for the service.\r\nShiny Servers can currently only be hosted from Ubuntu 14.04+ (64 bit) or CentOS/RHEL 6+ (64 bit), or SLES 12. RStudio has provided these systems with pre-built installers. Otherwise, the server has to be built from the source, for which the instructions are listed here.\r\nOnce installed, Shiny resorts to deploying apps on the default configuration, in which the apps will be hosted on port 3838. To launch an app, you can copy the app into the location of the server on your PC: sudo cp -R ~/MY-APP /srv/shiny-server/\r\nThe configurations can be altered using this reference to launch on different ports or other settings.\r\nSubscription plans of Shiny.io\r\nDeployment on the Shiny cloud through Shiny.io comes at different price points, and offers different features.\r\n\r\nFree\r\nStarter\r\nBasic\r\nStandard\r\nProfessional\r\nCost\r\nFree\r\n$9/mo\r\n$39/mo\r\n$99/mo\r\n$299/mo\r\n# of Apps\r\n5\r\n25\r\nUnlimited\r\nUnlimited\r\nUnlimited\r\nHours\r\n25\r\n100\r\n500\r\n2000\r\n10000\r\nLinks\r\nhttps://shiny.rstudio.com/deploy/https://www.rstudio.com/products/shiny/download-server/https://docs.rstudio.com/shiny-server/#introductionhttps://www.rstudio.com/assets/img/RStudio-Connect-12July2021.pdfhttps://shiny.rstudio.com/tutorial/written-tutorial/lesson7/https://github.com/rstudio/shiny-server/blob/master/README.mdhttps://github.com/rstudio/shiny-server/wiki/Building-Shiny-Server-from-Source\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:29-07:00"
    },
    {
      "path": "group_8.html",
      "title": "Deployment",
      "description": "Tableau",
      "author": [],
      "contents": "\r\nBrief description\r\nFor Tableau, the deployment, or in other words, the way to generate a public link for our visualization is called Publish.\r\nThere are mainly 4 common methods for publishing the workbooks: * Tableau Server and Tableau Online * Tableau Desktop * Tableau Reader * Tableau Public\r\nAll of them are very convenient and easy processes, which can be finished directly through the user interface. What we need to consider when choosing between those options are:\r\nDevice types used by your intended audience\r\nWhether users can install client-based software\r\nWhether the audience needs to edit or change the workbooks\r\nOur access to Tableau Server\r\nLicensing needs and the cost of them\r\nSecurity requirements\r\nAs for the cost, he publishing itself didn’t need extra payment. But we may need to pay 70 dollars per month for Tableau Creator to get the access of Tableau desktop, Tableau Server and Tableau Online.\r\nLong description\r\nFor Tableau, the deployment, or in other words, the way to generate a public link for our visualization is called Publish.\r\nThere are mainly 4 common methods for publishing the workbooks:\r\nTableau Server and Tableau Online:\r\nTableau Server is a paid product provides browser-based analytics without the need to download software. And Tableau Online is the hosted SaaS version of Tableau Server and can also be used to publish and share dashboards and workbooks.\r\nTo publish to Tableau Server or Tableau Online, our server or site administrator must grant you the following capabilities: * A site role of Creator (formerly Publisher) on the site we are publishing to. * View and Save capabilities set to allowed on the project into which we publish.\r\nWith Tableau Server, content can be shared through the share icon in Tableau Server. \r\nThe share icon can be used to email a link to the workbook or embed a URL on a web page. Users can then access the published Tableau content via a web browser. Users can also subscribe to workbooks or worksheets published on Tableau Server. These workbooks can be set up for automatic refresh, ensuring the latest view of the data. Also, if end-users are given edit permissions, they can make changes within Tableau Server’s web authoring environment.\r\nBesides, the workbooks published on Tableau Server and Tableau Online can be viewed on Tableau Mobile as well, which is designed for mobile devices like ipads and cell phones, helping us to keep a pulse on our data from wherever we are, whenever we need it.\r\nTableau Desktop:\r\nTableau desktop is a paid product that allows content editing, viewing and supports multiple methods for sharing. It is available to download on Windows and Mac, and provides the most comprehensive authoring environment. In Tableau Desktop, users can open Tableau packaged workbooks and connect to workbooks published on Tableau Server. The way to publish is also very easy. We just need to open the workbook we want to publish and select Server > Publish Workbook.\r\nCompared to Tableau Server, Tableau Desktop has more capabilities. For example, we can change whether the data is embedded in the workbook or published separately, or change how people authenticate with data sources. And there are ways to show or hide sheets, show sheets as tabs and include external files. There is a detailed tutorial on the Tableau official website.\r\nTableau Reader：\r\nTableau Reader is a free desktop application that you can use to open and interact with data visualizations built in Tableau Desktop.But for workbooks published on Tableau Server, it can not work. Also, Tableau Reader only works with packaged workbooks (TWBX format). This means the Tableau workbook and the data for the workbook are packaged together into a TWBX file, which could be an issue with security and/or file sizes.\r\nTableau Public：\r\nTableau Public is a free platform to publicly share and explore data visualizations online. Anyone can create visualizations using either Tableau Desktop Professional Edition or the free Public Edition. Visualizations published to Tableau Public are available for anyone to see online. To publish the workbooks, we need to open them in Tableau Desktop, select Server > Tableau Public > Save to Tableau Public, sign in with our Tableau Public account, type a name for the workbook and click Save.\r\nAfter the workbook is published, we will be redirected to our account on the Tableau Public website. To get a link to share on social media or code to embed in a web page, we just need to display a view, and then click Share at the bottom of the view.\r\nTo be conclude：\r\nall of them are very convenient and easy processes, which can be finished directly through the user interface. What we need to consider when choosing between those options are:\r\nDevice types used by your intended audience\r\nWhether users can install client-based software\r\nWhether the audience needs to edit or change the workbooks\r\nOur access to Tableau Server\r\nLicensing needs and the cost of them\r\nSecurity requirements\r\nLinks\r\nPublish Data Sources and Workbooks\r\nComprehensive Steps to Publish a Workbook\r\nSave Workbooks to Tableau Public\r\n6 Ways to Publish & Share Tableau Content\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:30-07:00"
    },
    {
      "path": "group_9.html",
      "title": "Deployment",
      "description": "Dash",
      "author": [],
      "contents": "\r\nBrief description\r\nDash apps can be deployed using two different methods, Plotly’s recommended paid service, Dash Enterprise, and the free-to-use Heroku. Both methods use git-based deployment and so by learning one it is easy to switch to the other. Dash Enterprise provides a suite of development tools and deployment support that allows for easy deployment onto local Linux servers or virtual private cloud services. Dash Enterprise handlrs all of the dependencies of your app by running it through a secure and isolated container, and because of this, deployment is extremely simple and only requires committing changes to git and then running git push plotly master. Python, R, and system-level dependencies are also automatically installed by Dash Enterprise, and any future updates to the app can be deployed through committing them and pushing to git. Deployment onto Heroku is essentially the same process since it is also git-based but it doesn’t automatically handle dependencies and so a couple more steps are required, such as setting up a virtual environment, creating a requirements.txt file, and a Procfile to run the app.\r\nLong description\r\nBefore deployment, Dash apps are run through localhost and can only be viewed on your machine. To allow others to access your app you must deploy it to a server. There are two Plotly supported methods of deploying Dash apps. The first method, which is recommended by Plotly, is Dash Enterprise.\r\nDash Enterprise is a paid service provided by Plotly that allows for rapid Dash app deployment. Dash Enterprise provides a variety of services that aid in Dash app development (which is outside of the scope of this document) and deployment onto your local Linux servers or virtual private cloud services such as AWS, Google Cloud, or Azure.\r\nDash Enterprise uses a git-based deployment that automatically installs your app’s Python, R, and system-level dependencies. Conflicting dependencies are not a problem with Dash Enterprise because every Dash app is run from a secure and isolated container. Using the following three easy steps you can deploy a Dash app from the command line.\r\nInitialize your Dash project folder with git:\r\ncd <your-folder-name>\r\ngit init\r\nSelect SSH or HTTPS deployment method: * For HTTPS:\r\ngit remote add plotly https://<your-dash-enterprise-platform>\r\nwhere <your-dash-enterprise-platform> is replaced with the hostname of your licensed Dash Enterprise in your virtual private cloud service.\r\nFor SSH:\r\ngit remote add plotly <user-name>@<your-dash-enterprise-platform>\r\nDeploy your Dash app to Dash Enterprise:\r\ngit add .\r\ngit commit -m \"<deployment commit message>\"\r\ngit push plotly master\r\nFollowing these steps, the Dash app is ready for use and can be visited at your Dash Enterprise platform address. Any subsequent updates to your app can be easily made with a git push.\r\nThe second method that you can use to deploy your Dash app is Heroku, which is free to use. Fortunately, Heroku also uses a git-based deployment method so not only is it still simple but one can switch between Dash Enterprise and Heroku fairly easily. Other than all of the development tools and support that Dash Enterprise provides you, the main difference between the two services are that Heroku doesn’t automatically take care of your app’s dependencies, and so you have to create a virtual environment and manage them yourself.\r\nTo deploy a python Dash app using Heroku, first you need a free Heroku account and Python version 3.10. You must download the Heroku installer for your computer’s platform, which will provide you with the ability to use the heroku command from the command line. Use the heroku login command to login to Heroku, which is required for heroku and git commands to work correctly.\r\nAfter creating a folder for your project you must initialize it with git and create a virtual environment:\r\ngit init\r\nvirtualenv venv\r\nsource venv/bin/activate\r\nSince you are using a virtual environment you must install your app’s dependencies, including Dash and Plotly:\r\npip install dash\r\npip install plotly\r\nAdditionally you will need the dependency gunicorn, to deploy your app:\r\npip install gunicorn\r\nIn your project folder, you must create the app (app.py), requirements.txt, and a Procfile.\r\nThe requirements.txt file lists your app’s dependencies and is used by Pip to install them when deploying Heroku. This file can be filled automatically when in your virtual environment with:\r\npip freeze > requirements.txt\r\nThe final file that is required for deployment in this method is the Procfile. The Procfile explicitly declares what command is executed to start your app. Its contents should look something like this:\r\nweb: gunicorn app:server\r\nRunning this declares the web process type which means the app will be attached to the HTTP routing Heroku stack and receive web traffic after deployment. app refers to the filename (app.py) and server refers to the server variable in the app.\r\nOnce you have all of these files, you can deploy to Heroku using the following commands:\r\nheroku create <dash-app-name> git add . git commit -m “<deployment commit message>” git push heroku master heroku ps:scale web=1\r\nYou can now view your app at https://<dash-app-name>.herokuapp.com. You can also use heroku open from the command line to open the website. If you update your app you can commit your changes to git and deploy to Heroku again with:\r\ngit push heroku master\r\nThe line heroku ps:scale web=1 specifies that the app is running on a single web dyno. A dyno is a lightweight container that runs the command in the Procfile, and the more dynos you have running the more horizontally scaled out your app will be which means it can handle higher volumes of traffic. You can check how many dynos are running with heroku ps. Your app is by default deployed on a free dyno, which will sleep after a half-hour of not receiving traffic. What this means is that the first bout of traffic it receives after falling asleep will cause a delay of a few seconds before the app loads. Every Heroku account gets a quota of free dyno hours (550 hours a month, 1000 a month with credit card verification), after which the apps will no longer run. You can upgrade to a hobby or professional dyno type to avoid dyno sleeping.\r\nLinks\r\nhttps://dash.plotly.com/deployment\r\nhttps://plotly.com/dash/app-manager/?tab=deployment\r\nhttps://devcenter.heroku.com/articles/getting-started-with-python?singlepage=true\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:31-07:00"
    },
    {
      "path": "index.html",
      "title": "Dash - Tableau - Shiny Comparison",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\r\n\r\nDash\r\nTableau\r\nShiny\r\nHistory - Is this technology mantained by a company or it is open source (or both)?\r\n\r\n\r\n\r\nWhen was it created? Are other companies involved in the current development of this technology? Is possible to be used with different languages (Python / R / Julia / excel / others)? Since when?\r\ngroup_30\r\ngroup_29\r\ngroup_28\r\nScope - Provide the link to the official webpage and main public repo of this technology. If possible, provide the number of stars in the main repository. Report the number of questions open in Stack Overflow. Are there other relevant forums / chats where you can ask questions about this technology? Report the number of issues opened in the main repository. How popular is this technology? Is it mostly used in academia or industry (or both)?\r\ngroup_27\r\ngroup_26\r\ngroup_25\r\nFrontend List documentation (official or not) where you can find how to create layout designs with this technology. At what level is the layout customizable? Can you use bootstrap? How easy it is to use it?\r\ngroup_24\r\ngroup_23\r\ngroup_22\r\nReactivity - How do you generate a reactive plot? Can you indicate (1) the basic way to create a reactive plot, (2) how to create a plot reactive to more than one input and, (3) how to create more than one reactive output (for example, having a plot and text to print on the screen)?\r\ngroup_21\r\ngroup_20\r\ngroup_19\r\nDocumentation and reproducibility - (1) Mention all the official documentation resources. (2) Are there ways to run the dashboard in a reproducible way locally (ie., creating a package?, Docker? Binder? Nothing is said about it?) Provide links/examples if you find that it is possible.\r\ngroup_18\r\ngroup_17\r\ngroup_16\r\nBackend and project structure - (1) Common plotting libraries (interactive or not) used in this technology. What are the most used libraries for maps? Describe the different ways to organize the app regarding the files used in the project (could the files be splitted in minor finles / modules/ etc)\r\ngroup_15\r\ngroup_14\r\ngroup_13\r\nTesting and databases - (1) List packages or other technologies used for testing the app. Is this a common practice for this technology? (2) Is it easy to connect external databases? Mention resources about how to that\r\ngroup_12\r\ngroup_11\r\ngroup_10\r\nDeployment - List all the possible ways to deploy and share this technology using a link. Are all of them free? Explore and describe the most you can about all the options.\r\ngroup_9\r\ngroup_8\r\ngroup_7\r\nPerformance and Examples - (1) How could you improve the performance of this dashboard? (2)Provide an extensive list of examples of relevant apps (published or in galleries or repos). Why are they relevant and given what criteria? Do you find more apps for industry or academia?\r\ngroup_6\r\ngroup_5\r\ngroup_4\r\nResources - Famous conferences - workshops - twitter accounts to follow - blogpost/webpages - sources of material about this technology - Podcasts - Discord/Slack communities - YouTube Channels. Provide the most extensive list of resources you can with a short description for each. Where do you find the most material? Where would you suggest a beginner start learning about this technology?\r\ngroup_3\r\ngroup_2\r\ngroup_1\r\n\r\n\r\n\r\n",
      "last_modified": "2022-03-28T19:41:32-07:00"
    }
  ],
  "collections": []
}
